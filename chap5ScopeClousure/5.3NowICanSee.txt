NOW I CAN SEE

El snippet previo es de alguna manera academico y construido artificialmente para ilustrar usando
clousures. Pero prometi algo mas que un juguete cool. Prometi que el clousure era algo alrededor
de todo. Vamos a ver esta verdad.

function wait(message) {
	setTimeout(function timer() {
		console.log(message);
	}, 5000);
}
wait("Hello message here!!!!");

Tomamos una funcion interna ( nombrada timer ) y pasamos al setTimeout(..). Pero el timer tiene un scope clousure
 sobre wait(), de hecho manteniendo y usando una referencia a la variable mensaje.

A mil milisegundos despues de que hayamos ejecutado wait(..), y su scope interno deberia de otra manera haberse
ido, esa funcion anonima se mantiene como un clousure sobre ese scope.

En lo profundo en las entranas del motor, la utilidad built-in setTimeout(...) tiene una referencia a algun
parametro, probablemente llamada fn or func o algo como eso. El engine va a invocar esa funcion, la cual se
esta invocando nuestra funcion interna timer, y el lexical scope referenciado continua intacta.

Clousure.

O si usted esta usando la persuacion de jquery ( o cualquier framework, para este asunto ).

function setupBot(name, selector) {
	$( selector ).click(function activator() {
		console.log( "Activating: " + name );
	});
}
setupBot("Clousure Bot 1", "#bot_1");
setupBot("Clousure Bot 2", "#bot_2");

No estoy seguro que clase de codigo escribe usted, pero por lo general escribo codigo que sea responsable
de controlar un ejercito completo de clousure drones, bueno esto es totalmente relistico.

(De alguna) Broma, escencialmente, cuando y donde sea usted trata a las funciones ( que accescen su propopio
scope lexico ) como valores first-class y los pasa alrededor, es probable ver las funciones ejercitando el
clousure. Sea que los timers, event handlers, Ajax request, mensajes cross window, web workers, o cualquiera
otro asyncronico o ( syncronico ) gracias, cuando usted pasa un callback function, este listo a lanzar un
clousure alrededor.

El capitulo 3 introduce el patron IIFE, es un ejemplo de un clousure observable, por nuestra definicion previa.

var a = 2;
(function IIFEE() {
    console.log( a );
})();

Este codigo funciona, pero no es estrictamente una observacion de un clousure. Por que? Por que la funcion
( al que llamamos IIFEE aqui ) no esta siendo ejecutada desde afuera en su scope lexico. Todavia invocada
aqui mismo en el mismo scope a como fue declarada ( despues enclosing/global scope que matiene a la variable
 'a'). 'a' es encontrada por medio por el normal scope lexico, no por medio de un clousure.

Mientras que un clousure quizas tecnicamente esta pasando una declaracion de tiempo, no va ser estrictamente
observable, y entonces, como ellos dicen, es un arbol callendo en el bosque con nadie alrededor para
poder escucharlo.

Aunque una funcion IIFEE no es ella misma un ejemplo de clousure observable, crea un scope absolutamente, y es una
de las erramientas mas comunes que utilizamos un scope propio cerrado. Entonces las funciones IIFE's son de
hecho fuertemente relacionados a clousures, aunque no estemos ejercitando clousures.
































