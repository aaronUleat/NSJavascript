EVAL

La funcion eval() en Javascript toma un string como un argumento y
lo trata el contenido del string como si fuera en realidad codigo  escrito
en ese punto en le programa. En otras palabras, usted puede programaticamente
generar codigo dentro de su codigo escrito. y corre el codigo generado
como si fuera creado en el tiempo donde el codigo fue escrito.

Evualando eval(..) (un juego de palabras) en esa luz, deberia estar claro como
eval(..) permite modificar el ambiente lexical scope al hacer trampa y
pretende al tiempo del codigo escrito (lexical) codigo estuviera ahi todo el
tiempo.
En las siguientes lineas de codigo despues de un eval(..) haya sido ejecutado, el motor
no sabra o le importara que el codigo previo en cuestionamiento fue interpretado dinamicamente
y ese ambiente lexical scope haya sido modificado. El motor simplemente ejecutara su scope
lexico y buscara como siempre lo hace.
considere el siguiente codigo

function foo(str, a) {
	eval( str );// cheating
	console.log(a, b);
}
var b = 2;
foo("var b = 3;", 1);

El string "var b = 3;", es tradado, al momento del llamdo eval(..) , como un codigo que estuvo ahi
todo el tiempo. Por que ese codigo lo que hace es declarar una nueva varaible 'b', y modifica el
lexical scope de foo(..). De ehcho, como mencionamos mas temprano, este codigo en realidad crea una variable
'b' dentro de foo(..), que tapa a la variable 'b' que fue declarada en el scope global.
Cuando el console.log(...) ocurren, encuentra ambos 'a' y 'b' en el scope de foo(..), y nunca encuentra el 'b'
que esta afuera dentro del scope global, por que ya encontro 'b' en el scope de foo(..). En consecuencia imprimimos
'1, 3' en vez de '1, 2' como seria en el caso comun.

En este ejemplo por simplicidad, el string del "codigo" que pasamos fue un literal fijo(fixed). Pero pudo haber sido
 programaticamente creado al agregar caracteres juntos basado en la logica de su programa. eval(..) es usado
 para ejecutar codigo creado dinamicamente, como evaluando dinamicamente codigo escencial estatico de un string
 literal no podria proveer beneficios reales que al hacer el codigo directamente nosotros.

 Por default, si un string de codigo que eval(..) ejecuta contiene una o mas declaraciones (ya sea variables o
 funciones ) estas acciones mofician el scope lexico en el cual eval(..) es residente. Tecnicamente, eval(...)
 puede ser invocado indirectamente, por medio de varios trucos (que vas haya de lo que veremos aqui), lo que causa
 es en vez es en el contexto de nuestro scope global, asi modificarlo. Pero en cualquier caso, ya sea eval(..)
 puede en tiempo de ejecucion modificar codigo author-time en el lexical scope.

 eval(..) cuando lo usamos en modo estricto opera en su propio scope lexico, lo que significa en declaraciones
 hechas dentro del eval(..) no modifican el enclosing scope.

 function foo(str) {
 	"use strict";
 	eval(str);
 	console.log(a); // referenceError: a is not defined
 }

 foo("var a = 2");

 Hay otras facilidades en Javascript que son equivalentes al efecto que tiene eval(..).setTimeout(..) y setInterval(..)
 pueden tomar un string como su primer respectivo argumento, el contenido del cual son evaluados de acuerdo
 a como el codigo se genera dinamicamente. Esto es viejo, es comportamiento legado y desde hace mucho tiempo obsoleto.
 Asi que no lo haga.

The new Function(..) una funcion constructora similarmente to un string de codigo en su ultimo argumento para volverlo
un codigo dinamicamente generado (los primeros argumentos, si hay alguno, son los llamados parametros para la nueva
funcion). Este function-constructor sintax es ligeramente mas seguro, que eval(..), pero tambien debe ser evitado
en su codigo. Los casos usados para codigo dinamicamente generado dentro de su programa son increiblemente raros,
como las degradaciones del rendimiento, casi nuncan valen la capacidad de validez.




















