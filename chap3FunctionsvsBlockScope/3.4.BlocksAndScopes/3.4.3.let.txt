LET

En consecuencia hasta ahora, hemos visto que Javascript solo tiene algunos comportamientos extranos que exponen
el funcionamiento del block scope. Es ahi donde todo lo que tenemos, y fue por muchos anos, entonces el block
scoping seria terriblemente util para el desarrollador en Javascript.

Afortunadamente, ES6 cambia eso, y introduce un nuevo keyword 'let', que se sienta al lado de 'var' como otra
manera para declarar variables.

El keyword 'let' adjunta la declaracion de la variable al scope de el cualquiera que sea su block ( comunmente
un {...} ) que lo contiene. En otras palabras, let implicitamente secuestra cualquier block scope por la declaracion
de sus variables

var foo = true;
if(foo) {
	let bar = foo * 2;
	bar = something(bar);
	console.log(bar);
}

console.log(bar); // reference error

Utilizando let para adjuntar una variable a un block existente es de alguna manera implicito. Puede confundir si usted
no esta poniendo atencion viendo cual block tiene las variables adjuntadas al scope y estan en el habito de mover
blocks alrededor, envolviendolos a ellos en otros blocks, etc, a como usted desarrolla y envuelve el codigo.

Creando blocks explicitos para block-scoping pueden dirigir algunas de estas dudas, haciendolo un poco mas obvio
donde las variables son adjuntadas y no  lo estan. Usualmente, codigo explicito es preferible sobre implicito
o codigo misterioso.
Este estilo explicito block-scoping es facil de conseguir y encaja mas naturalmente como un block-scoping funciona
en otros lenguages

var foo = true;

if(foo) {
	{ // block explicito
		let bar = foo * 2;
		bar = something(bar);
		console.log(bar);
	}
}
console.log(bar); // ReferenceError

Podemos crear un block arbitriario para let para que enlace al incluir simplemente un {...} donde sea como
statement es una gramatica valida. En este caso, hemos hecho un block explicito dentro de el statement if, que talvez
sea mas facil como un solo bloque para moverse alrededor de el mas tarde refactorizando, sin afectar la posicion
y la semantica del enclosing if.

Para otra manera de expresar blocks exolicitos, vea el Appendix B.

En el capitulo 4, vamos a dirigirnos al hoisting, que habla hacerca declaraciones que van hacer tomadas
como existentes por el scope entero en el cual ocurre.

Sin embargo, declaraciones hechas por medio de let no van hacer hoist al scope entero del block, van aparecer dentro.
Tales declaraciones no van visiblemente "existir" en el block hasta la declaracion de la sentencia.

{
    console.log(bar); // reference error
    let bar = 2;
}

GARBAGE COLLECTION

Otra razon block-scoping es util para clousures y colecciones garbage al reclamar memoria. Vamos brevemente a
ilustrarla aqui, pero el mecanismo clousure va ser explicado en detalle en el chapter 5.

function process(data) {
	// do something interesting
}
var someReallyBigData = {};
process(someReallyBigData);

var btn = document.getElementById( "my_button" );
btn.addEventListener("click", function (evt) {
	console.log("button clicked")
}, /*capturingPhase=*/  false);

La funcion click el click handler callback no necesita la variable someReallyBigData. Eso significa, teoricamente,
despues del process(..) corre, el big memory-heavy data estructura puede ser garbage colectada. Sin envargo,
es muy problablemente ( aunque una implementacion dependiente ) eso que el Js engine va tener que mantener
la estructura alrededor, desde que la funcion click tiene un clousure sobre todo el scope.

Block-scoping puede dirigir este asunto, haciendolo claro al engine que no necesita mantener someReallyBigData

function process(data) {
    // do something interesting
}
// anyting declarared inside this block can go away after
{
    let someReallyBigData = {..};
    process( someReallyBigData );
}

var btn = document.getElementById("my_button");
btn.addEventListener("click", function click(evt){
    console.log("Buton Clicked");
});

Declarando explicitamente blocks para variables para que localmente enlazan a su herramienta poderoza, usted agregar
a su caja de trabajo de codigo.

LET LOOPS

Un caso particular donde let brilla es en el for loop caso que discutimos previamente.

for (let i = 0; i < 10; i++ ) {
    console.log(i);
}

console.log(i); // ReferenceError

No solamente let lo hace en el for loop, el 'i' para el cuerpo for loop, pero de hecho, va a reenlazar a cada iteracion
del loop, haciendose seguro de reasignar en el valor donde la terminacion de la iteracion loop previa.

Aqui hay otra manera de ilustrar la per-interation comportamiento de enlaze

{
	let j;
	for(j=0; j<10; j++) {
		let i = j; // rebond for each iteration
		console.log(i);
	}
}

La razon por la cual esta per-interation se esta enlanzando es interesante se volvera claro en el capitulo 5
cuando discutamos clousures.

Por el motivo que las declaraciones let se agregan a blocks arbitrarios en vez de enclosing functions scope (or global),
pueden haber algunos contratiempos donde codigo existente esconde dependencia en functions-scoped var declarations,
y replazar var con let require cuidado adicional a la hora factorizar el codigo.

Considere:

var foo = true, baz = 10;

if(foo) {
    var bar = 3;
    if(baz>bar) {
        console.log(baz);
    }
    // ..
}

Este codigo puede ser factorizado facilmente de la siguiente manera:

var foo = true; baz = 10;

if(foo) {
    var bar = 3
}
if(baz > bar) {
    console.log(baz)
}

Pero tenga cuidado cuando hace esos cambios cuando usa block-scoped variables.

var foo = true, baz = 10;

if(foo) {
    let bar = 3;

    if(baz > bar) { // dont forget bar when moving.
        console.log(baz);
    }
}

Vea el apendix B para una alternativa ( mas explicita )  estilo del block-scoping que talvez pueda proveer
una manera mas fzcil de mantener/refactoriar que es mas robusta para estos escenarios.


































